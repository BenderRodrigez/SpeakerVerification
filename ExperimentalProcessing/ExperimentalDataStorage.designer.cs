#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExperimentalProcessing
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EXPERIMENTS")]
	public partial class ExperimentalDataStorageDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertRECORDS(RECORDS instance);
    partial void UpdateRECORDS(RECORDS instance);
    partial void DeleteRECORDS(RECORDS instance);
    partial void InsertPHRASES(PHRASES instance);
    partial void UpdatePHRASES(PHRASES instance);
    partial void DeletePHRASES(PHRASES instance);
    partial void InsertEXPERIMENT(EXPERIMENT instance);
    partial void UpdateEXPERIMENT(EXPERIMENT instance);
    partial void DeleteEXPERIMENT(EXPERIMENT instance);
    partial void InsertDICTORS(DICTORS instance);
    partial void UpdateDICTORS(DICTORS instance);
    partial void DeleteDICTORS(DICTORS instance);
    #endregion
		
		public ExperimentalDataStorageDataContext() : 
				base(global::ExperimentalProcessing.Properties.Settings.Default.EXPERIMENTSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ExperimentalDataStorageDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExperimentalDataStorageDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExperimentalDataStorageDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExperimentalDataStorageDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RECORDS> RECORDS
		{
			get
			{
				return this.GetTable<RECORDS>();
			}
		}
		
		public System.Data.Linq.Table<PHRASES> PHRASES
		{
			get
			{
				return this.GetTable<PHRASES>();
			}
		}
		
		public System.Data.Linq.Table<EXPERIMENT> EXPERIMENT
		{
			get
			{
				return this.GetTable<EXPERIMENT>();
			}
		}
		
		public System.Data.Linq.Table<DICTORS> DICTORS
		{
			get
			{
				return this.GetTable<DICTORS>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RECORDS_TRAIN")]
	public partial class RECORDS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Path;
		
		private int _DictorId;
		
		private int _PhraseId;
		
		private EntitySet<EXPERIMENT> _EXPERIMENT;
		
		private EntitySet<EXPERIMENT> _EXPERIMENT1;
		
		private EntityRef<PHRASES> _PHRASES;
		
		private EntityRef<DICTORS> _DICTORS;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnDictorIdChanging(int value);
    partial void OnDictorIdChanged();
    partial void OnPhraseIdChanging(int value);
    partial void OnPhraseIdChanged();
    #endregion
		
		public RECORDS()
		{
			this._EXPERIMENT = new EntitySet<EXPERIMENT>(new Action<EXPERIMENT>(this.attach_EXPERIMENT), new Action<EXPERIMENT>(this.detach_EXPERIMENT));
			this._EXPERIMENT1 = new EntitySet<EXPERIMENT>(new Action<EXPERIMENT>(this.attach_EXPERIMENT1), new Action<EXPERIMENT>(this.detach_EXPERIMENT1));
			this._PHRASES = default(EntityRef<PHRASES>);
			this._DICTORS = default(EntityRef<DICTORS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DictorId", DbType="Int NOT NULL")]
		public int DictorId
		{
			get
			{
				return this._DictorId;
			}
			set
			{
				if ((this._DictorId != value))
				{
					if (this._DICTORS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDictorIdChanging(value);
					this.SendPropertyChanging();
					this._DictorId = value;
					this.SendPropertyChanged("DictorId");
					this.OnDictorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhraseId", DbType="Int NOT NULL")]
		public int PhraseId
		{
			get
			{
				return this._PhraseId;
			}
			set
			{
				if ((this._PhraseId != value))
				{
					if (this._PHRASES.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhraseIdChanging(value);
					this.SendPropertyChanging();
					this._PhraseId = value;
					this.SendPropertyChanged("PhraseId");
					this.OnPhraseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECORDS_EXPERIMENT", Storage="_EXPERIMENT", ThisKey="Id", OtherKey="TrainRecordId")]
		public EntitySet<EXPERIMENT> EXPERIMENT
		{
			get
			{
				return this._EXPERIMENT;
			}
			set
			{
				this._EXPERIMENT.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECORDS_EXPERIMENT1", Storage="_EXPERIMENT1", ThisKey="Id", OtherKey="TestRecordId")]
		public EntitySet<EXPERIMENT> EXPERIMENT1
		{
			get
			{
				return this._EXPERIMENT1;
			}
			set
			{
				this._EXPERIMENT1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHRASES_RECORDS", Storage="_PHRASES", ThisKey="PhraseId", OtherKey="Id", IsForeignKey=true)]
		public PHRASES PHRASES
		{
			get
			{
				return this._PHRASES.Entity;
			}
			set
			{
				PHRASES previousValue = this._PHRASES.Entity;
				if (((previousValue != value) 
							|| (this._PHRASES.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PHRASES.Entity = null;
						previousValue.RECORDS.Remove(this);
					}
					this._PHRASES.Entity = value;
					if ((value != null))
					{
						value.RECORDS.Add(this);
						this._PhraseId = value.Id;
					}
					else
					{
						this._PhraseId = default(int);
					}
					this.SendPropertyChanged("PHRASES");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICTORS_RECORDS", Storage="_DICTORS", ThisKey="DictorId", OtherKey="Id", IsForeignKey=true)]
		public DICTORS DICTORS
		{
			get
			{
				return this._DICTORS.Entity;
			}
			set
			{
				DICTORS previousValue = this._DICTORS.Entity;
				if (((previousValue != value) 
							|| (this._DICTORS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DICTORS.Entity = null;
						previousValue.RECORDS.Remove(this);
					}
					this._DICTORS.Entity = value;
					if ((value != null))
					{
						value.RECORDS.Add(this);
						this._DictorId = value.Id;
					}
					else
					{
						this._DictorId = default(int);
					}
					this.SendPropertyChanged("DICTORS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EXPERIMENT(EXPERIMENT entity)
		{
			this.SendPropertyChanging();
			entity.RECORDS_TRAIN = this;
		}
		
		private void detach_EXPERIMENT(EXPERIMENT entity)
		{
			this.SendPropertyChanging();
			entity.RECORDS_TRAIN = null;
		}
		
		private void attach_EXPERIMENT1(EXPERIMENT entity)
		{
			this.SendPropertyChanging();
			entity.RECORDS_TEST = this;
		}
		
		private void detach_EXPERIMENT1(EXPERIMENT entity)
		{
			this.SendPropertyChanging();
			entity.RECORDS_TEST = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PHRASES")]
	public partial class PHRASES : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private EntitySet<RECORDS> _RECORDS;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public PHRASES()
		{
			this._RECORDS = new EntitySet<RECORDS>(new Action<RECORDS>(this.attach_RECORDS), new Action<RECORDS>(this.detach_RECORDS));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHRASES_RECORDS", Storage="_RECORDS", ThisKey="Id", OtherKey="PhraseId")]
		public EntitySet<RECORDS> RECORDS
		{
			get
			{
				return this._RECORDS;
			}
			set
			{
				this._RECORDS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RECORDS(RECORDS entity)
		{
			this.SendPropertyChanging();
			entity.PHRASES = this;
		}
		
		private void detach_RECORDS(RECORDS entity)
		{
			this.SendPropertyChanging();
			entity.PHRASES = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EXPERIMENT")]
	public partial class EXPERIMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TrainRecordId;
		
		private int _TestRecordId;
		
		private System.Nullable<float> _Energy;
		
		private string _Settings;
		
		private int _TrainDictorId;
		
		private int _TestDictorId;
		
		private EntityRef<RECORDS> _RECORDS;
		
		private EntityRef<RECORDS> _RECORDS1;
		
		private EntityRef<DICTORS> _DICTORS;
		
		private EntityRef<DICTORS> _DICTORS1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTrainRecordIdChanging(int value);
    partial void OnTrainRecordIdChanged();
    partial void OnTestRecordIdChanging(int value);
    partial void OnTestRecordIdChanged();
    partial void OnEnergyChanging(System.Nullable<float> value);
    partial void OnEnergyChanged();
    partial void OnSettingsChanging(string value);
    partial void OnSettingsChanged();
    partial void OnTrainDictorIdChanging(int value);
    partial void OnTrainDictorIdChanged();
    partial void OnTestDictorIdChanging(int value);
    partial void OnTestDictorIdChanged();
    #endregion
		
		public EXPERIMENT()
		{
			this._RECORDS = default(EntityRef<RECORDS>);
			this._RECORDS1 = default(EntityRef<RECORDS>);
			this._DICTORS = default(EntityRef<DICTORS>);
			this._DICTORS1 = default(EntityRef<DICTORS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainRecordId", DbType="Int NOT NULL")]
		public int TrainRecordId
		{
			get
			{
				return this._TrainRecordId;
			}
			set
			{
				if ((this._TrainRecordId != value))
				{
					if (this._RECORDS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainRecordIdChanging(value);
					this.SendPropertyChanging();
					this._TrainRecordId = value;
					this.SendPropertyChanged("TrainRecordId");
					this.OnTrainRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestRecordId", DbType="Int NOT NULL")]
		public int TestRecordId
		{
			get
			{
				return this._TestRecordId;
			}
			set
			{
				if ((this._TestRecordId != value))
				{
					if (this._RECORDS1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestRecordIdChanging(value);
					this.SendPropertyChanging();
					this._TestRecordId = value;
					this.SendPropertyChanged("TestRecordId");
					this.OnTestRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Energy", DbType="Real")]
		public System.Nullable<float> Energy
		{
			get
			{
				return this._Energy;
			}
			set
			{
				if ((this._Energy != value))
				{
					this.OnEnergyChanging(value);
					this.SendPropertyChanging();
					this._Energy = value;
					this.SendPropertyChanged("Energy");
					this.OnEnergyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Settings", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				if ((this._Settings != value))
				{
					this.OnSettingsChanging(value);
					this.SendPropertyChanging();
					this._Settings = value;
					this.SendPropertyChanged("Settings");
					this.OnSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainDictorId", DbType="Int NOT NULL")]
		public int TrainDictorId
		{
			get
			{
				return this._TrainDictorId;
			}
			set
			{
				if ((this._TrainDictorId != value))
				{
					if (this._DICTORS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainDictorIdChanging(value);
					this.SendPropertyChanging();
					this._TrainDictorId = value;
					this.SendPropertyChanged("TrainDictorId");
					this.OnTrainDictorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDictorId", DbType="Int NOT NULL")]
		public int TestDictorId
		{
			get
			{
				return this._TestDictorId;
			}
			set
			{
				if ((this._TestDictorId != value))
				{
					if (this._DICTORS1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestDictorIdChanging(value);
					this.SendPropertyChanging();
					this._TestDictorId = value;
					this.SendPropertyChanged("TestDictorId");
					this.OnTestDictorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECORDS_EXPERIMENT", Storage="_RECORDS", ThisKey="TrainRecordId", OtherKey="Id", IsForeignKey=true)]
		public RECORDS RECORDS_TRAIN
		{
			get
			{
				return this._RECORDS.Entity;
			}
			set
			{
				RECORDS previousValue = this._RECORDS.Entity;
				if (((previousValue != value) 
							|| (this._RECORDS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RECORDS.Entity = null;
						previousValue.EXPERIMENT.Remove(this);
					}
					this._RECORDS.Entity = value;
					if ((value != null))
					{
						value.EXPERIMENT.Add(this);
						this._TrainRecordId = value.Id;
					}
					else
					{
						this._TrainRecordId = default(int);
					}
					this.SendPropertyChanged("RECORDS_TRAIN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECORDS_EXPERIMENT1", Storage="_RECORDS1", ThisKey="TestRecordId", OtherKey="Id", IsForeignKey=true)]
		public RECORDS RECORDS_TEST
		{
			get
			{
				return this._RECORDS1.Entity;
			}
			set
			{
				RECORDS previousValue = this._RECORDS1.Entity;
				if (((previousValue != value) 
							|| (this._RECORDS1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RECORDS1.Entity = null;
						previousValue.EXPERIMENT1.Remove(this);
					}
					this._RECORDS1.Entity = value;
					if ((value != null))
					{
						value.EXPERIMENT1.Add(this);
						this._TestRecordId = value.Id;
					}
					else
					{
						this._TestRecordId = default(int);
					}
					this.SendPropertyChanged("RECORDS_TEST");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICTORS_EXPERIMENT", Storage="_DICTORS", ThisKey="TrainDictorId", OtherKey="Id", IsForeignKey=true)]
		public DICTORS DICTORS
		{
			get
			{
				return this._DICTORS.Entity;
			}
			set
			{
				DICTORS previousValue = this._DICTORS.Entity;
				if (((previousValue != value) 
							|| (this._DICTORS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DICTORS.Entity = null;
						previousValue.EXPERIMENT.Remove(this);
					}
					this._DICTORS.Entity = value;
					if ((value != null))
					{
						value.EXPERIMENT.Add(this);
						this._TrainDictorId = value.Id;
					}
					else
					{
						this._TrainDictorId = default(int);
					}
					this.SendPropertyChanged("DICTORS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICTORS_EXPERIMENT1", Storage="_DICTORS1", ThisKey="TestDictorId", OtherKey="Id", IsForeignKey=true)]
		public DICTORS DICTORS1
		{
			get
			{
				return this._DICTORS1.Entity;
			}
			set
			{
				DICTORS previousValue = this._DICTORS1.Entity;
				if (((previousValue != value) 
							|| (this._DICTORS1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DICTORS1.Entity = null;
						previousValue.EXPERIMENT1.Remove(this);
					}
					this._DICTORS1.Entity = value;
					if ((value != null))
					{
						value.EXPERIMENT1.Add(this);
						this._TestDictorId = value.Id;
					}
					else
					{
						this._TestDictorId = default(int);
					}
					this.SendPropertyChanged("DICTORS1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DICTORS")]
	public partial class DICTORS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<RECORDS> _RECORDS;
		
		private EntitySet<EXPERIMENT> _EXPERIMENT;
		
		private EntitySet<EXPERIMENT> _EXPERIMENT1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DICTORS()
		{
			this._RECORDS = new EntitySet<RECORDS>(new Action<RECORDS>(this.attach_RECORDS), new Action<RECORDS>(this.detach_RECORDS));
			this._EXPERIMENT = new EntitySet<EXPERIMENT>(new Action<EXPERIMENT>(this.attach_EXPERIMENT), new Action<EXPERIMENT>(this.detach_EXPERIMENT));
			this._EXPERIMENT1 = new EntitySet<EXPERIMENT>(new Action<EXPERIMENT>(this.attach_EXPERIMENT1), new Action<EXPERIMENT>(this.detach_EXPERIMENT1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICTORS_RECORDS", Storage="_RECORDS", ThisKey="Id", OtherKey="DictorId")]
		public EntitySet<RECORDS> RECORDS
		{
			get
			{
				return this._RECORDS;
			}
			set
			{
				this._RECORDS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICTORS_EXPERIMENT", Storage="_EXPERIMENT", ThisKey="Id", OtherKey="TrainDictorId")]
		public EntitySet<EXPERIMENT> EXPERIMENT
		{
			get
			{
				return this._EXPERIMENT;
			}
			set
			{
				this._EXPERIMENT.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DICTORS_EXPERIMENT1", Storage="_EXPERIMENT1", ThisKey="Id", OtherKey="TestDictorId")]
		public EntitySet<EXPERIMENT> EXPERIMENT1
		{
			get
			{
				return this._EXPERIMENT1;
			}
			set
			{
				this._EXPERIMENT1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RECORDS(RECORDS entity)
		{
			this.SendPropertyChanging();
			entity.DICTORS = this;
		}
		
		private void detach_RECORDS(RECORDS entity)
		{
			this.SendPropertyChanging();
			entity.DICTORS = null;
		}
		
		private void attach_EXPERIMENT(EXPERIMENT entity)
		{
			this.SendPropertyChanging();
			entity.DICTORS = this;
		}
		
		private void detach_EXPERIMENT(EXPERIMENT entity)
		{
			this.SendPropertyChanging();
			entity.DICTORS = null;
		}
		
		private void attach_EXPERIMENT1(EXPERIMENT entity)
		{
			this.SendPropertyChanging();
			entity.DICTORS1 = this;
		}
		
		private void detach_EXPERIMENT1(EXPERIMENT entity)
		{
			this.SendPropertyChanging();
			entity.DICTORS1 = null;
		}
	}
}
#pragma warning restore 1591
